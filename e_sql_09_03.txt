
テキスト：達人に学ぶSQL徹底指南書 ～初級者で終わりたくないあなたへ～
日付：4月25日
作成者：玉利

問題番号：演習問題9-③シーケンスを全て求める-集合試行的発想
内容：
 引き続き、述語論理を集合論に変換する練習です。「最大何人まで座れますか？」でNOT EXISTSを求めたシーケンスを全て保持するビューのクエリを、HAVING句で書き換えてください。基本的には演習問題2と同じ考え方でいいのですが、特性関数の条件がちょっと複雑になります。

---回答---
実行文
SELECT   S1.seat AS start_seat,                                                                      -- 最大何人まで座れるか調べるために空席の先頭の座席番号を取得
         S2.seat AS end_seat,                                                                        -- 最大何人まで座れるか調べるために空席の最後尾の座席番号を取得
         S2.seat - S1.seat + 1 AS seat_cnt                                                           -- 最大何人まで座れるかを表示するために最初と最後で引き算を行い当人分の1を加える
  FROM   seats3 S1, seats3 S2, seats3 S3                                                             -- それぞれ先頭座席、最後尾座席とそれらの間で一つずつ確認するための座席をとるため3つテーブルを呼び出す
 WHERE   S1.seat <= S2.seat                                                                          -- 先頭座席は最後尾座席よりも大きくならないのでそれ以下の数字になるよう条件を加える
   AND   S3.seat BETWEEN S1.seat - 1 AND S2.seat + 1                                                 -- 比べるための座席は先頭・最後尾それぞれの前後の座席の状況がどうなのか比べるために一つずつ前後にずらした数字のみにする
GROUP BY S1.seat,S2.seat                                                                             -- 先頭座席と最後尾座席で重複している部分をまとめる
HAVING                                                                                               -- まとめた結果に対して条件を追加
         COUNT(*) = SUM(CASE WHEN (s3.seat between s1.seat and s2.seat AND s3.status = '空') THEN 1  -- 先頭・最後尾座席の間の座席が空の時は条件に当てはまるので1を追加する
                             WHEN (s3.seat = s2.seat + 1 AND S3.status != '空') THEN 1               -- 現在の座席が最後尾一つ後ろの座席でかつ空席ではないときは条件に当てはまるので1を追加
                             WHEN (s3.seat = s1.seat - 1 AND S3.status != '空') THEN 1               -- 現在の座席が先頭一つ前の座席でかつ空席ではないときは条件に当てはまるので1を追加
                             ELSE 0 END);                                                            -- そうでないときは追加なし。それらの加算結果がWHEREで指定しグルーピングした結果の総数と同じの時はすべて条件に当てはまっているのでそれを取得する
                            
実行結果

 start_seat | end_seat | seat_cnt
------------+----------+----------
          2 |        5 |        4
          7 |        7 |        1
          9 |       10 |        2
          